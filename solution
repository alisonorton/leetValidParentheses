class Solution {
    public boolean isValid(String s) {
        HashMap<Character, Character> parenth = new HashMap<>();
        
        /*We want to add the keys and values in this order so we can
        * put the first parentheses in a stack and as we pop them off
        * check them against the map's values when we check the keys
        */
        parenth.put(')', '(');
        parenth.put('}', '{');
        parenth.put(']', '[');
        
        //This stack is where we'll put chars that aren't map keys
        Stack<Character> compare = new Stack<>();
        
        for(int i = 0; i < s.length(); i++){
            //dealimg with one char at a time
            char temp = s.charAt(i);
            //Is this char contained as a key in our map
            if(parenth.containsKey(temp)){
                /*If it is, check to see if compare is empty. If it is, return false.
                * If compare is NOT empty, pop off the top and compare it to the value
                * contained at the key temp. If they aren't equal the parentheses don't match
                * so return false
                */
                if(compare.isEmpty() || compare.pop() != parenth.get(temp)){
                    return false;
                }
            }
            else{
                //If the map does NOT contain that key add it to the stack
                compare.push(temp);
            }
        }
        //If the stack is empty then all the parentheses matched
        //If the stack is NOT empty the parentheses didn't match
        return compare.isEmpty();
    }
}
